//** Logique métier des routes "sauce" */

const Sauce = require('../models/sauce');
const fs = require('fs'); // package node "file system" qui permet de modifier le système de fichiers, notamment en permettant la suppression de fichiers.
// const jwt = require('jsonwebtoken'); à supprimer 

// Utilisation de la méthode find() du modèle Mongoose qui renvoit un tableau de toutes les Sauces de notre base de données
exports.getAllSauces = (req, res, next) => {
  Sauce.find()
    .then(sauces => res.status(200).json(sauces))
    .catch(error => res.status(400).json({ error }));
};


// Utilisation de la méthode findOne() du modèle Mongoose qui renvoit un sauce précise avec son id fourni //
exports.getOneSauce = (req, res, next) => {
  Sauce.findOne({ // vérifier si une sauce avec l'id contenu dans les param de la req existe 
    _id: req.params.id  
  }).then(
    (sauce) => { // si oui, renvoyer la sauce
      res.status(200).json(sauce);
    }
  ).catch(
    (error) => {
      res.status(404).json({
        error: error
      });
    }
  );
};


//** Création d'une nouvelle sauce et enregistrement de celle-ci dans la bdd */
exports.createSauce = (req, res, next) => {
  const sauceObject = JSON.parse(req.body.sauce); // Création d'un objet sauce et parser objet req. pour obtenir un objet exploitable
  // suppresion de champs dans l'objet
   delete sauceObject._id; // champs _id, car id sera automatiquement généré par la bdd 
   delete sauceObject._userId; // champs userId (celui qui a crée l'objet, la sauce), mesure de sécu = ne pas faire confiance au client
   const sauce = new Sauce({ // création d'un nouvel objet sauce sur base du modele mongoose 
       ...sauceObject, // spread operator qui reprend tous les champs à remplir pour créer une sauce, moins les deux champs supprimés
       userId: req.auth.userId, // extraction de l'userId de l'objet req.
       imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}` // génération de l'url de l'image manuellement en faisant appelle à des propriétés de l'objet req. (${})
   });
   sauce.save() 
   .then(() => { res.status(201).json({message: 'Sauce enregistrée !'})})
   .catch(error => { res.status(400).json( { error })})
};


//** Modifier une sauce via son id selon que l'utilisateur souhaite modifier ou non un fichier - Vérif des droits d'auteur */
exports.modifySauce = (req, res, next) => {
  // Vérification de l'existance d'un champs file dans notre req (si la modification contient un chgt d'image) 
  const sauceObject = req.file ? { 
    // si oui, récup de l'objet en parsant la chaine de caractère (en faire un objet exploitable)
      ...JSON.parse(req.body.sauce),
      imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}` // on récrée l'URL de l'image
  } : { ...req.body }; // sinon, récup de l'objet direcement dans le corp de la req 

  delete sauceObject._userId; // supp de l'userId de la req (éviter qu'un user crée une sauce à son nom et le modifie pour le réassigner à qn d'autre)
  // Chercher la sauce/obj à modifier dans la bdd et vérifier si l'user qui veut modif la sauce en est bien l'auteur
  Sauce.findOne({_id: req.params.id}) // récup la sauce en bdd 
      .then((sauce) => { // vérifier si l'user est l'auteur 
          if (sauce.userId != req.auth.userId) { // si userid recup en bdd est diff de userId du token 
              res.status(401).json({ message : 'Not authorized'});
          } else { // si userId === auteur, maj de la sauce
              Sauce.updateOne({ _id: req.params.id}, { ...sauceObject, _id: req.params.id}) // {obj à mettre à jour}, avec quel objet = > {recup dans le corps la fonction, id param de l'URL}
              .then(() => res.status(200).json({message : 'Sauce modifiée!'}))
              .catch(error => res.status(401).json({ error }));
          }
      })
      .catch((error) => {
          res.status(400).json({ error }); // sauce inexistante en bdd 
      });
};


//** Suppression d'une sauce via son id - Vérif des droits d'auteur */
exports.deleteSauce = (req, res, next) => {
  // Chercher la sauce/obj à supp dans la bdd et vérifier si l'user qui veut supp la sauce en est bien l'auteur
  Sauce.findOne({ _id: req.params.id})
      .then(sauce => {
          if (sauce.userId != req.auth.userId) {
              res.status(401).json({message: 'Not authorized'});
          } else { // si l'userId est l'auteur, supp l'obj de la bdd et l'image du fs (syst de fichier)
              const filename = sauce.imageUrl.split('/images/')[1]; // recup de l'URL du fichier enrg dans le rep /image
              fs.unlink(`images/${filename}`, () => { // suppresion du fichier via methode unlink de fs + chemin 
                  // Callback de la fonction : méthode appelée une fois la supp faite (supp asynchrone)
                  Sauce.deleteOne({_id: req.params.id}) // supp de l'obj dans la bdd 
                      .then(() => { res.status(200).json({message: 'Sauce supprimée !'})})
                      .catch(error => res.status(401).json({ error }));
              });
          }
      })
      .catch( error => { // sauce inexistante en bdd 
          res.status(500).json({ error });
      });
};
